#####################################################################################################################
WARNING! These files have only been tested on POCO F2 Pro with MIUI V13.0.2.0.SJKCNXM from xiaomi.eu:
"xiaomi.eu_multi_HMK30Pro_V13.0.2.0.SJKCNXM_v13-12-fastboot"
Link: https://sourceforge.net/projects/xiaomi-eu-multilang-miui-roms/files/xiaomi.eu/MIUI-STABLE-RELEASES/MIUIv13/

TWRP twrp-3.6.1_11_v3.4_A12-lmi-skkk_ad9dbce1.img:
Link: https://t.me/PocoF2ProGlobalOfficial/116586

ADB AND FASTBOOT FOR WINDOWS AND LINUX:
Link: https://developer.android.com/studio/releases/platform-tools 

If you intend to install the same files on a different device, you're on your own. Make a nan-backup, beforehand! 
#####################################################################################################################

REQUIREMENTS:
ADB and FASTBOOT installed on your PC with Windows or Linux to run the commands;
a USB STICK to install (systemrw_1.32_flashable.zip and Magisk-v24.0.apk);
TWRP version: twrp-3.6.1_11_v3.4_A12-lmi-skkk_ad9dbce1.img.


INSTALLATION PROCESS:

Step 1:
Copy the folder "required_files_and_apps" to a USB Stick.
Go to "internal_storage" folder and copy the folder "NeoBackup" to your device's internal storage.


Step 2:
Reboot into TWRP, click on "Install", then click on "Select Storage" and choose "USB OTG".
Go to "required_files_and_apps" folder and flash the "systemrw_1.32_flashable.zip" file (to
make the system "RW" Readable and Writable) and wait until it's done.


Step 3:
Reboot the TWRP, click on "Install", then click on "Select Storage" and choose "USB OTG".
Go to "required_files_and_apps" folder and flash "Magisk-v24.0.apk" to Root the device, then reboot the device.


Step 4:
Open the Magisk app and reboot the device if needed. (WARNING: Do not update the app to avoid bootloop).


Step 5:
Go to "required_files_and_apps" folder, using any file explorer, and install the following apks on your device:
BusyBox-6.8.2(68003).apk.
Neo-Backup-7.0.0.apk


Step 6:
Open the BusyBox app, grant it root permission and click on "Install"! 
Open the OAndBackupX app and grant it root permission, if needed. Follow its first use setup. Do not forget to choose 
the folder "NeoBackup" placed in your device's internal storage as the OAndBackupX's default Backup folder!


Step 7:
Open the OAndBackupX app, select "Restore" and click on "Sound Effects", then click on restore and click on "Yes" to 
confirm the restoration.


Step 8:
Reboot into TWRP, click on "Mount" button, and tick the following partitions: "System", "system_ext" and "Vendor".


Step 9: 
Plug your device to the computer with a USB cable.
Open a new CMD or a Terminal inside "raphael_miui_v12.5.4.0_soundfx_and_config_files_to_lmi" folder, and type in the following
commands to mount some directories for adb shell:

adb shell
mount -o rw,remount /
mount -o rw,remount /vendor
mount -o rw,remount /system_ext

busybox mount -o remount,rw –t ext4 /dev/block/dm-0 /system_root
busybox mount -o remount,rw –t ext4 /dev/block/dm-1 /system_ext


Step 10: Delete the following files:

ls vendor/lib/soundfx/
ls vendor/lib64/soundfx/
rm -Rvf /vendor/lib/soundfx/*
rm -Rvf /vendor/lib64/soundfx/*
rm -Rvf /vendor/lib/libsmwrapper.so
rm -Rvf /vendor/lib/libcapiv2svacnn.so
rm -Rvf /vendor/lib/libcapiv2vop.so
rm -Rvf /vendor/lib64/libcapiv2svacnn.so
rm -Rvf /vendor/lib64/libcapiv2vop.so
rm -Rvf /vendor/etc/sound_trigger_platform_info.xml
rm -Rvf /vendor/etc/audio_tuning_mixer.txt
rm -Rvf /vendor/etc/default_volume_tables.xml
rm -Rvf /vendor/etc/audio_policy_volumes.xml
rm -Rvf /vendor/etc/sound_trigger_mixer_paths.xml
rm -Rvf /vendor/lib/android.hardware.audio.common@2.0-util.so 
rm -Rvf /vendor/lib/android.hardware.audio.common@4.0-util.so
rm -Rvf /vendor/lib/android.hardware.audio.common@5.0-util.so
rm -Rvf /vendor/lib/android.hardware.audio.common@6.0-util.so
rm -Rvf /vendor/lib/android.hardware.audio.common-util.so
rm -Rvf /vendor/lib64/android.hardware.audio.common@2.0-util.so
rm -Rvf /vendor/lib64/android.hardware.audio.common@4.0-util.so
rm -Rvf /vendor/lib64/android.hardware.audio.common@5.0-util.so
rm -Rvf /vendor/lib64/android.hardware.audio.common@6.0-util.so
rm -Rvf /vendor/lib64/android.hardware.audio.common-util.so
rm -Rvf /vendor/lib64/hw/android.hardware.audio.effect@2.0-impl.so
rm -Rvf /vendor/lib64/hw/android.hardware.audio.effect@4.0-impl.so
rm -Rvf /vendor/lib64/hw/android.hardware.audio.effect@5.0-impl.so
rm -Rvf /vendor/lib64/hw/android.hardware.audio.effect@6.0-impl.so
rm -Rvf /vendor/lib64/hw/android.hardware.audio@2.0-impl.so
rm -Rvf /vendor/lib64/hw/android.hardware.audio@4.0-impl.so
rm -Rvf /vendor/lib64/hw/android.hardware.audio@5.0-impl.so
rm -Rvf /vendor/lib64/hw/android.hardware.audio@6.0-impl.so
rm -Rvf /vendor/lib/hw/android.hardware.audio.effect@2.0-impl.so
rm -Rvf /vendor/lib/hw/android.hardware.audio.effect@4.0-impl.so
rm -Rvf /vendor/lib/hw/android.hardware.audio.effect@5.0-impl.so
rm -Rvf /vendor/lib/hw/android.hardware.audio.effect@6.0-impl.so
rm -Rvf /vendor/lib/hw/android.hardware.audio.service
rm -Rvf /vendor/lib/hw/android.hardware.audio@2.0-impl.so
rm -Rvf /vendor/lib/hw/android.hardware.audio@4.0-impl.so
rm -Rvf /vendor/lib/hw/android.hardware.audio@5.0-impl.so
rm -Rvf /vendor/lib/hw/android.hardware.audio@6.0-impl.so
rm -Rvf /vendor/lib/modules/audio_wcd_core.ko
rm -Rvf /vendor/lib/modules/audio_wcd9xxx.ko
rm -Rvf /vendor/lib/modules/audio_wcd938x.ko
rm -Rvf /vendor/lib/modules/audio_wcd938x_slave.ko
rm -Rvf /vendor/lib/modules/audio_wsa_macro.ko
rm -Rvf /vendor/lib/modules/audio_wsa881x.ko
rm -Rvf /vendor/lib/modules/audio_pinctrl_wcd.ko
rm -Rvf /vendor/build.prop
rm -Rvf /vendor/lib/libaudio_log_utils.so
rm -Rvf /vendor/lib/libaudioalsa.so
rm -Rvf /vendor/lib/libaudioconfigstore.so
rm -Rvf /vendor/lib/libaudioparsers.so
rm -Rvf /vendor/lib/libaudioroute_ext.so
rm -Rvf /vendor/lib64/libaudio_log_utils.so
rm -Rvf /vendor/lib64/libaudioalsa.so
rm -Rvf /vendor/lib64/libaudioconfigstore.so
rm -Rvf /vendor/lib64/libaudioparsers.so
rm -Rvf /vendor/bin/audioshell_service
rm -Rvf /vendor/bin/audioflacapp
rm -Rvf /vendor/lib/libwebrtc_audio_preprocessing.so
rm -Rvf /vendor/lib64/libwebrtc_audio_preprocessing.so
rm -Rvf /system_ext/lib/soundfx
rm -Rvf /system_ext/lib64/soundfx
rm -Rvf system_root/system/lib/android.hardware.audio.effect@7.0-util.so
rm -Rvf system_root/system/lib/android.hardware.audio.common@7.0.so
rm -Rvf system_root/system/lib/android.hardware.audio.common@7.0-enums.so
rm -Rvf system_root/system/lib/android.hardware.audio@7.0-util.so
rm -Rvf system_root/system/lib/android.hardware.audio.common@7.0-util.so
rm -Rvf system_root/system/lib/android.hardware.audio@7.0.so
rm -Rvf system_root/system/lib/android.hardware.audio.effect@7.0.so
rm -Rvf system_root/system/lib/libaudiohal@7.0.so
rm -Rvf system_root/system/lib64/android.hardware.audio.effect@7.0-util.so
rm -Rvf system_root/system/lib64/android.hardware.audio.common@7.0.so
rm -Rvf system_root/system/lib64/android.hardware.audio.common@7.0-enums.so
rm -Rvf system_root/system/lib64/android.hardware.audio@7.0-util.so
rm -Rvf system_root/system/lib64/android.hardware.audio.common@7.0-util.so
rm -Rvf system_root/system/lib64/android.hardware.audio@7.0.so
rm -Rvf system_root/system/lib64/android.hardware.audio.effect@7.0.so
rm -Rvf system_root/system/lib64/libaudiohal@7.0.so
exit


Step 11: Push the required files:

adb push vendor /vendor


Step 12:
Reboot the device and enjoy it!



If you intend to delete some files in the root directory, you can install:
"rs-file-manager-1-8-8-1.apk" and/or "es-file-explorer-4-2-9-2-1.apk" placed in the folder "required_files_and_apps".
Open "Es File Explorer" or "RS File Manager" and grant it root permission and then go Tools option and tick "Root Explorer", 
grant it root permission, if needed, then choose "Mount R/W" option (in case you've installed "Es File Explorer").
 
